from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.database.requests as rq
from app.database.requests import (get_products, get_cities, get_services,get_item_product,
                                   get_item_products, get_item_service, get_item_services)

router = Router()

# class ChooseProduct(StatesGroup):
#     ProductCategory = State()
class Reg(StatesGroup):
    product_category = State ()
    service_category = State()
    city = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–æ–º - "–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±–∞–∑–∞—Ä"!',
                             reply_markup=kb.main)


@router.callback_query(F.data == 'to_main')
async def cmd_start(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é')
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–æ–º - "–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±–∞–∑–∞—Ä"!',
                                reply_markup=kb.main)


@router.message(F.text == 'üõí –¢–æ–≤–∞—Ä—ã')
async def cmd_test(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await kb.products())



@router.message(F.text == 'üõ†Ô∏è –£—Å–ª—É–≥–∏')
async def cmd_test(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await kb.services())

@router.message(F.text == 'üíº –í–∞–∫–∞–Ω—Å–∏–∏')
async def cmd_test(message: Message):
    await message.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')


@router.callback_query(F.data.startswith('product_'))
async def product(callback: CallbackQuery, state: FSMContext):
    product_category = callback.data.split('_')[1]
    await state.update_data(product_category=product_category)
    await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {product_category}')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
                                  reply_markup=await kb.cities())
    await callback.message.delete()


@router.callback_query(F.data.startswith('service_'))
async def service(callback: CallbackQuery, state: FSMContext):
    service_category = callback.data.split('_')[1]
    await state.update_data(service_category=service_category)
    await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥: {service_category}')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
                                  reply_markup=await kb.cities())
    await callback.message.delete()


@router.callback_query(F.data.startswith('city_'))
async def item(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split('_')[1]
    data = await state.get_data()
    # await state.update_data(city=city)

    if 'product_category' in data:
        product_category = data.get('product_category')
        items = await get_item_product(city, product_category)
        if items:
            await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:',
                                          reply_markup=await kb.items_product(city, product_category))
        else:
            await callback.message.answer(f"–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    elif 'service_category' in data:
        service_category = data.get('service_category')
        items = await get_item_service(city, service_category)
        if items:
            await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:',
                                           reply_markup=await kb.items_service(city, service_category))
        else:
            await callback.message.answer(f"–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    else:
         await callback.message.answer (f"–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    await state.clear()
    await callback.message.delete()


@router.callback_query(F.data.startswith('item_'))
async def item(callback: CallbackQuery):
    item_data = await rq.get_item(callback.data.split('_')[1])
    await callback.message.answer(f'======================'
                                  f'\n–ò–º—è: {item_data.name}'
                                  f'\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {item_data.description}'
                                  f'\n\n–¢–µ–ª–µ—Ñ–æ–Ω: {item_data.phone}'
                                  f'\n======================')
    await callback.message.delete()
